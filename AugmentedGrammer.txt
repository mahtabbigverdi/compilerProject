1. Program -> Declaration-list $
2. Declaration-list -> Declaration Declaration-list | EPSILON
3. Declaration -> Declaration-initial Declaration-prime
4. Declaration-initial -> #ptype Type-specifier #declare ID
5. Declaration-prime -> Fun-declaration-prime | Var-declaration-prime
6. Var-declaration-prime -> #pop; | [#pnum NUM ] #save_array;
7. Fun-declaration-prime -> #start_func ( Params ) #update_func  Compound-stmt #end_func
8. Type-specifier -> int | void
9. Params -> #ptype int #declare ID Param-prime Param-list | void Param-list-void-abtar
10. Param-list-void-abtar -> ID Param-prime Param-list | EPSILON
11. Param-list -> , Param Param-list | EPSILON
12. Param -> Declaration-initial Param-prime
13. Param-prime -> [ ] #param_array | EPSILON #parameter
14. Compound-stmt -> { Declaration-list Statement-list }
15. Statement-list -> Statement Statement-list | EPSILON
16. Statement -> Expression-stmt | Compound-stmt | Selection-stmt | Iteration-stmt | Return-stmt
| For-stmt
17. Expression-stmt -> Expression ; #pop | #break break ; | ;
18. Selection-stmt -> if ( Expression ) #save Statement #jpf_save else Statement #jp
19. Iteration-stmt -> #break_save while #label ( Expression ) #save Statement #while
20. Return-stmt -> return Return-stmt-prime #return
21. Return-stmt-prime -> #pnum ; | Expression ;
22. For-stmt -> #break_save for #pid ID = Vars #label #init_for Statement #jpf_for
23. Vars -> Var #psave_var Var-zegond
24. Var-zegond -> , Var #save_var Var-zegond | EPSILON #set_for_count
25. Var -> #pid ID Var-prime
26. Expression -> Simple-expression-zegond | #pid ID B
27. B -> = Expression #assign | [ Expression ] #array_index H | Simple-expression-prime
28. H-> = Expression #assign | G D C
29. Simple-expression-zegond -> Additive-expression-zegond C
30. Simple-expression-prime -> Additive-expression-prime C
31. C -> #poperator Relop Additive-expression #relop | EPSILON
32. Relop -> < | ==
33. Additive-expression -> Term D
34. Additive-expression-prime -> Term-prime D
35. Additive-expression-zegond -> Term-zegond D
36. D -> #poperator Addop Term #addop D | EPSILON
37. Addop-> + | -
38. Term -> Signed-factor G
39. Term-prime -> Signed-factor-prime G
40. Term-zegond -> Signed-factor-zegond G
41. G -> * Signed-factor #mult G | EPSILON
42. Signed-factor -> + Factor | - Factor #neg | Factor
43. Signed-factor-prime -> Factor-prime
44. Signed-factor-zegond -> + Factor | - Factor #neg | Factor-zegond
45. Factor -> ( Expression ) | #pid ID Var-call-prime | #pnum  NUM 
46. Var-call-prime -> #start_call ( Args ) #end_call| Var-prime
47. Var-prime -> [ Expression ] #array_index | EPSILON
48. Factor-prime -> #start_call ( Args )  #end_call| EPSILON
49. Factor-zegond -> ( Expression ) | #pnum NUM
50. Args -> Arg-list | EPSILON
51. Arg-list -> Expression Arg-list-prime
52. Arg-list-prime -> , Expression Arg-list-prime | EPSILON