first = {'Program': ['$', 'int', 'void'],
         'Declaration-list': ['int', 'void'],
         'Declaration': ['int', 'void'],
         'Declaration-initial': ['int', 'void'],
         'Declaration-prime': [';', '[', '('],
         'Var-declaration-prime': [';', '['],
         'Fun-declaration-prime': ['('],
         'Type-specifier': ['int', 'void'],
         'Params': ['int', 'void'],
         'Param-list-void-abtar': ['ID'],
         'Param-list': [','],
         'Param': ['int', 'void'],
         'Param-prime': ['['],
         'Compound-stmt': ['{'],
         'Statement-list': ['ID', ';', 'NUM', '(', '{', 'break', 'if', 'while', 'return', 'for', '+', '-'],
         'Statement': ['ID', ';', 'NUM', '(', '{', 'break', 'if', 'while', 'return', 'for', '+', '-'],
         'Expression-stmt': ['ID', ';', 'NUM', '(', 'break', '+', '-'],
         'Selection-stmt': ['if'],
         'Iteration-stmt': ['while'],
         'Return-stmt': ['return'],
         'Return-stmt-prime': ['ID', ';', 'NUM', '(', '+', '-'],
         'For-stmt': ['for'],
         'Vars': ['ID'],
         'Var-zegond': [','],
         'Var': ['ID'],
         'Expression': ['ID', 'NUM', '(', '+', '-'],
         'B': ['[', '(', '=', '<', '==', '+', '-', '*'],
         'H': ['=', '<', '==', '+', '-', '*'],
         'Simple-expression-prime': ['(', '<', '==', '+', '-', '*'],
         'Simple-expression-zegond': ['NUM', '(', '+', '-'],
         'C': ['<', '=='],
         'Relop': ['<', '=='],
         'Additive-expression': ['+', '-', '(', 'ID', 'NUM'],
         'Additive-expression-prime': ['+', '-', '*', '('],
         'Additive-expression-zegond': ['+', '-', '(', 'NUM'],
         'D': ['+', '-'],
         'Addop': ['+', '-'],
         'Term': ['+', '-', '(', 'ID', 'NUM'],
         'Term-prime': ['*', '('],
         'Term-zegond': ['+', '-', '(', 'NUM'],
         'G': ['*'],
         'Signed-factor': ['+', '-', '(', 'ID', 'NUM'],
         'Signed-factor-prime': ['('],
         'Signed-factor-zegond': ['+', '-', '(', 'NUM'],
         'Factor': ['(', 'ID', 'NUM'],
         'Var-call-prime': ['(', '['],
         'Var-prime': ['['],
         'Factor-prime': ['('],
         'Factor-zegond': ['(', 'NUM'],
         'Args': ['+', '-', '(', 'ID', 'NUM'],
         'Arg-list': ['+', '-', '(', 'ID', 'NUM'],
         'Arg-list-prime': [','],
         }

follow = {'Program': ['$'],
          'Declaration-list': ['$', 'ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'while', 'return', 'for', '+', '-'],
          'Declaration': ['$', 'ID', ';', 'NUM', '(', 'int', 'void', '{', '}', 'break', 'if', 'while', 'return', 'for',
                          '+', '-'],
          'Declaration-initial': [';', '[', '(', ')', ','],
          'Declaration-prime': ['$', 'ID', ';', 'NUM', '(', 'int', 'void', '{', '}', 'break', 'if', 'while', 'return',
                                'for',
                                '+', '-'],
          'Var-declaration-prime': ['$', 'ID', ';', 'NUM', '(', 'int', 'void', '{', '}', 'break', 'if', 'while',
                                    'return', 'for',
                                    '+', '-'],
          'Fun-declaration-prime': ['$', 'ID', ';', 'NUM', '(', 'int', 'void', '{', '}', 'break', 'if', 'while',
                                    'return', 'for',
                                    '+', '-'],
          'Type-specifier': ['ID'],
          'Params': [')'],
          'Param-list-void-abtar': [')'],
          'Param-list': [')'],
          'Param': [')', ','],
          'Param-prime': [')', ','],
          'Compound-stmt': ['$', 'ID', ';', 'NUM', '(', 'int', 'void', '{', '}', 'break', 'if', 'else', 'while',
                            'return', 'for', '+', '-'],
          'Statement-list': ['}'],
          'Statement': ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'else', 'while',
                        'return', 'for', '+', '-'],
          'Expression-stmt': ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'else', 'while',
                              'return', 'for', '+', '-'],
          'Selection-stmt': ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'else', 'while',
                             'return', 'for', '+', '-'],
          'Iteration-stmt': ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'else', 'while',
                             'return', 'for', '+', '-'],
          'Return-stmt': ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'else', 'while',
                          'return', 'for', '+', '-'],
          'Return-stmt-prime': ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'else', 'while',
                                'return', 'for', '+', '-'],
          'For-stmt': ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'else', 'while',
                       'return', 'for', '+', '-'],
          'Vars': ['ID', ';', 'NUM', '(', '{', 'break', 'if', 'while',
                   'return', 'for', '+', '-'],
          'Var-zegond': ['ID', ';', 'NUM', '(', '{', 'break', 'if', 'while',
                         'return', 'for', '+', '-'],
          'Var': ['ID', ';', 'NUM', '(', ',', '{', 'break', 'if', 'while',
                  'return', 'for', '+', '-'],
          'Expression': [';', ']', ')', ','],
          'B': [';', ']', ')', ','],
          'H': [';', ']', ')', ','],
          'Simple-expression-prime': [';', ']', ')', ','],
          'Simple-expression-zegond': [';', ']', ')', ','],
          'C': [';', ']', ')', ','],
          'Relop': ['ID', 'NUM', '(', '+', '-'],
          'Additive-expression': [';', ']', ')', ','],
          'Additive-expression-prime': [';', ']', ')', ',', '<', '=='],
          'Additive-expression-zegond': [';', ']', ')', ',', '<', '=='],
          'D': [';', ']', ')', ',', '<', '=='],
          'Addop': ['ID', 'NUM', '(', '+', '-'],
          'Term': [';', ']', ')', ',', '<', '==', '+', '-'],
          'Term-prime': [';', ']', ')', ',', '<', '==', '+', '-'],
          'Term-zegond': [';', ']', ')', ',', '<', '==', '+', '-'],
          'G': [';', ']', ')', ',', '<', '==', '+', '-'],
          'Signed-factor': [';', ']', ')', ',', '<', '==', '+', '-', '*'],
          'Signed-factor-prime': [';', ']', ')', ',', '<', '==', '+', '-', '*'],
          'Signed-factor-zegond': [';', ']', ')', ',', '<', '==', '+', '-', '*'],
          'Factor': [';', ']', ')', ',', '<', '==', '+', '-', '*'],
          'Var-call-prime': [';', ']', ')', ',', '<', '==', '+', '-', '*'],
          'Var-prime': ['ID', 'NUM', '(', ';', ']', ')', ',', '{', 'break', 'if', 'while', 'return', 'for', '<', '==',
                        '+', '-', '*'],
          'Factor-prime': [';', ']', ')', ',', '<', '==', '+', '-', '*'],
          'Factor-zegond': [';', ']', ')', ',', '<', '==', '+', '-', '*'],
          'Args': [')'],
          'Arg-list': [')'],
          'Arg-list-prime': [')'],
          }
